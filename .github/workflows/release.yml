name: release
on:
  push:
    # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
    #   - 'v*'
    branches:
      - main
    #   - dev
    # package.json 更改后再触发发布
    # paths: [ "package.json" ]
jobs:
  build-static:
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v4

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      - id: release_check
        run: |
          RELEASE_STATUS=$(curl -I -m 10 -o /dev/null -s -w %{http_code} https://github.com/team-ide/teamide/releases/tag/v${{ steps.release_version.outputs.value }})
          echo "RELEASE_STATUS=$RELEASE_STATUS" >> $GITHUB_OUTPUT

      # 读取发布说明
      - name: Read Release Description
        id: release_body
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: juliangruber/read-file-action@v1
        with:
          path: RELEASE.md

      # 发布
      - name: Create Release
        id: create_release
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{steps.release_version.outputs.value}}
          release_name: ${{steps.release_version.outputs.value}}
          body: ${{steps.release_body.outputs.content}}
          draft: true # 是否是草稿
          prerelease: false # 是否是预发布

      # 准备 electron-template
      - run: |
          chmod +x ./desktop/install-electron-template.sh
          ./desktop/install-electron-template.sh
          mkdir -p electron-template/assets/server/lib
          echo '依赖DLL、so库等' > electron-template/assets/server/lib/README.md

      # 打包构建 html
      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      # npm install
      - run: |
          git clone https://github.com/team-ide/teamide-html
          cd teamide-html
          npm install
          npm run build

      # 创建release相关目录
      - run: |
          mkdir release
          mkdir release/base
          mkdir release/base/lib
          echo ''>release/base/lib/README.md
          
          cp -rf package.json release/
          cp -rf RELEASE.md release/
          cp -rf README.md release/base/
          cp -rf CHANGELOG.md release/base/CHANGELOG.md
          cp -rf conf/release release/base/conf
          
          cp -rf release/base release/server-windows-amd64
          
          cp -rf teamide-html/dist release/statics


      - run: |
          echo '{"upload_url":""}' > release/release.json

      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        run: |
          echo '${{ steps.create_release.outputs.upload_url }}'
          echo '{"upload_url":"${{ steps.create_release.outputs.upload_url }}"}' > release/release.json

      #      - name: Build Server
      #        uses: actions/setup-go@v2
      #        with:
      #          go-version: "1.20.14"
      # 将静态资源打包html.go
      #      - run: |
      #          go test -v -timeout 3600s -run ^TestStatic$ teamide/internal/static
      #          mv internal/static/html.go release/html.go

      # 上传共享资源
      - uses: actions/upload-artifact@v4
        with:
          name: release
          path: release
          include-hidden-files: true

      # 上传共享资源
      - uses: actions/upload-artifact@v4
        with:
          name: electron-template
          path: electron-template
          include-hidden-files: true

  build-mac-amd64:
    runs-on: macos-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v4

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: "1.20.1"

      - run: |
          mkdir darwin-amd64
          CGO_ENABLED=1 GOARCH=amd64 go build -ldflags="-s -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }} -X main.buildFlags=--isServer" -o darwin-amd64/server .
          CGO_ENABLED=1 GOARCH=amd64 go build -ldflags="-s -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }}" -o darwin-amd64/node teamide/pkg/node/main 

      # 上传共享资源
      - uses: actions/upload-artifact@v4
        with:
          name: darwin-amd64
          path: darwin-amd64
          include-hidden-files: true

  build-mac-arm64:
    runs-on: macos-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v4

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: "1.20.1"

      - run: |
          mkdir darwin-arm64
          CGO_ENABLED=1 GOARCH=arm64 go build -ldflags="-s -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }} -X main.buildFlags=--isServer" -o darwin-arm64/server .
          CGO_ENABLED=1 GOARCH=arm64 go build -ldflags="-s -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }}" -o darwin-arm64/node teamide/pkg/node/main 

      # 上传共享资源
      - uses: actions/upload-artifact@v4
        with:
          name: darwin-arm64
          path: darwin-arm64
          include-hidden-files: true

  build-mac:
    needs: ["build-static", "build-mac-amd64", "build-mac-arm64"]
    runs-on: macos-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v4

      # 下载共享资源
      - uses: actions/download-artifact@v4
        with:
          name: release
          path: release

      - uses: actions/download-artifact@v4
        with:
          name: darwin-amd64
          path: darwin-amd64

      - uses: actions/download-artifact@v4
        with:
          name: darwin-arm64
          path: darwin-arm64

      # 读取发布地址
      - id: release_upload_url
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/release.json
          property: upload_url

      # 下载共享资源
      - uses: actions/download-artifact@v4
        with:
          name: electron-template
          path: electron-template

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      - run: |
          cp -rf release/statics ./electron-template/assets/server/statics
          cp darwin-amd64/server ./electron-template/assets/server/server-darwin-amd64
          cp darwin-arm64/server ./electron-template/assets/server/server-darwin-arm64

      - run: |
          mkdir -p release/server-darwin-amd64/lib
          
          cp -rf release/statics release/server-darwin-amd64/statics
          cp -rf conf/release release/server-darwin-amd64/conf
          cp -rf docker/server.sh release/server-darwin-amd64/server.sh
          chmod +x release/server-darwin-amd64/server.sh
          
          cp -rf release/server-darwin-amd64 release/server-darwin-arm64
          
          cp darwin-amd64/server release/server-darwin-amd64/teamide
          cp darwin-arm64/server release/server-darwin-arm64/teamide

          mv release/server-darwin-amd64 teamide-server-darwin-amd64-${{steps.release_version.outputs.value}}
          zip -q -r teamide-server-darwin-amd64-${{steps.release_version.outputs.value}}.zip teamide-server-darwin-amd64-${{steps.release_version.outputs.value}}
          
          mv release/server-darwin-arm64 teamide-server-darwin-arm64-${{steps.release_version.outputs.value}}
          zip -q -r teamide-server-darwin-arm64-${{steps.release_version.outputs.value}}.zip teamide-server-darwin-arm64-${{steps.release_version.outputs.value}}
          
          mkdir -p teamide-node-darwin-amd64-${{steps.release_version.outputs.value}}
          cp darwin-amd64/node teamide-node-darwin-amd64-${{steps.release_version.outputs.value}}/node
          zip -q -r teamide-node-darwin-amd64-${{steps.release_version.outputs.value}}.zip teamide-node-darwin-amd64-${{steps.release_version.outputs.value}}
          
          mkdir -p teamide-node-darwin-arm64-${{steps.release_version.outputs.value}}
          cp darwin-arm64/node teamide-node-darwin-arm64-${{steps.release_version.outputs.value}}/node
          zip -q -r teamide-node-darwin-arm64-${{steps.release_version.outputs.value}}.zip teamide-node-darwin-arm64-${{steps.release_version.outputs.value}}
         

      # 上传 到 Release
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-node-darwin-amd64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-node-darwin-amd64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-node-darwin-arm64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-node-darwin-arm64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-server-darwin-amd64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-server-darwin-amd64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-server-darwin-arm64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-server-darwin-arm64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Electron Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd electron-template
          chmod +x assets/server/server-darwin-amd64
          chmod +x assets/server/server-darwin-arm64
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --mac -p always

  build-linux-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull linux-amd64
        run: docker pull --platform linux/amd64 teamide/build-go-gcc:amd64-1.20.14-7.3.0

      - name: Build linux-amd64
        run: |
          mkdir linux-amd64
          chmod +x cmd/build-linux-amd64.sh
          docker run --platform linux/amd64 -v $(pwd):/build teamide/build-go-gcc:amd64-1.20.14-7.3.0 /bin/bash /build/cmd/build-linux-amd64.sh ${{ steps.release_version.outputs.value }}
          mv linux-amd64-server linux-amd64/server
          mv linux-amd64-node linux-amd64/node

      # 上传共享资源
      - uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: linux-amd64
          include-hidden-files: true

  build-linux-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull linux-arm64
        run: docker pull --platform linux/arm64 teamide/build-go-gcc:arm64-1.20.14-7.3.0

      - name: Build linux-arm64
        run: |
          mkdir linux-arm64
          chmod +x cmd/build-linux-arm64.sh
          docker run --platform linux/arm64 -v $(pwd):/build teamide/build-go-gcc:arm64-1.20.14-7.3.0 /bin/bash /build/cmd/build-linux-arm64.sh ${{ steps.release_version.outputs.value }}
          mv linux-arm64-server linux-arm64/server
          mv linux-arm64-node linux-arm64/node

      # 上传共享资源
      - uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: linux-arm64
          include-hidden-files: true

  build-linux:
    needs: ["build-static","build-linux-amd64","build-linux-arm64"]
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v4

      # 下载共享资源
      - uses: actions/download-artifact@v4
        with:
          name: release
          path: release
      - uses: actions/download-artifact@v4
        with:
          name: linux-amd64
          path: linux-amd64
      - uses: actions/download-artifact@v4
        with:
          name: linux-arm64
          path: linux-arm64

      # 读取发布地址
      - id: release_upload_url
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/release.json
          property: upload_url

      # 下载共享资源
      - uses: actions/download-artifact@v4
        with:
          name: electron-template
          path: electron-template

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      # 将静态资源打包html.go
      #          mv release/html.go internal/static/html.go
      - run: |
          cp -rf release/statics ./electron-template/assets/server/statics
          cp linux-amd64/server ./electron-template/assets/server/server-linux-amd64
          cp linux-arm64/server ./electron-template/assets/server/server-linux-arm64

      - run: |
          mkdir -p release/server-linux-amd64/lib
          
          cp -rf release/statics release/server-linux-amd64/statics
          cp -rf conf/release release/server-linux-amd64/conf
          cp -rf lib/shentong/amd64/libaci.so release/server-linux-amd64/lib/libaci.so
          cp -rf docker/server.sh release/server-linux-amd64/server.sh
          chmod +x release/server-linux-amd64/server.sh
          
          cp -rf release/server-linux-amd64 release/server-linux-arm64
          rm -rf release/server-linux-arm64/lib/libaci.so
          cp -rf lib/shentong/arm64/libaci.so release/server-linux-arm64/lib/libaci.so
          
          cp linux-amd64/server release/server-linux-amd64/teamide
          cp linux-arm64/server release/server-linux-arm64/teamide

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          #这里用到了github的secrets功能，避免账户和密码随仓库泄露
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Build and push amd64
        #导入这个模块来完成自动编译和推送
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile-amd64
          push: true
          #在这里通过加入需要编译的平台和前面配好的QEMU，buildx来达到多平台编译 linux/amd64,linux/arm64,linux/arm
          platforms: linux/amd64
          #指定用户/仓库名
          tags: teamide/teamide-server:latest,teamide/teamide-server:${{ steps.release_version.outputs.value }}
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Build and push arm64
        #导入这个模块来完成自动编译和推送
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile-arm64
          push: true
          #在这里通过加入需要编译的平台和前面配好的QEMU，buildx来达到多平台编译 linux/amd64,linux/arm64,linux/arm
          platforms: linux/arm64
          #指定用户/仓库名
          tags: teamide/teamide-server-arm64:latest,teamide/teamide-server-arm64:${{ steps.release_version.outputs.value }}

      - run: |
          
          mv release/server-linux-amd64 teamide-server-linux-amd64-${{steps.release_version.outputs.value}}
          zip -q -r teamide-server-linux-amd64-${{steps.release_version.outputs.value}}.zip teamide-server-linux-amd64-${{steps.release_version.outputs.value}}

          mv release/server-linux-arm64 teamide-server-linux-arm64-${{steps.release_version.outputs.value}}
          zip -q -r teamide-server-linux-arm64-${{steps.release_version.outputs.value}}.zip teamide-server-linux-arm64-${{steps.release_version.outputs.value}}

          mkdir -p teamide-node-linux-amd64-${{steps.release_version.outputs.value}}
          cp linux-amd64/node teamide-node-linux-amd64-${{steps.release_version.outputs.value}}/node
          zip -q -r teamide-node-linux-amd64-${{steps.release_version.outputs.value}}.zip teamide-node-linux-amd64-${{steps.release_version.outputs.value}}

          mkdir -p teamide-node-linux-arm64-${{steps.release_version.outputs.value}}
          cp linux-arm64/node teamide-node-linux-arm64-${{steps.release_version.outputs.value}}/node
          zip -q -r teamide-node-linux-arm64-${{steps.release_version.outputs.value}}.zip teamide-node-linux-arm64-${{steps.release_version.outputs.value}}

      # 上传 到 Release
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-node-linux-amd64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-node-linux-amd64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-node-linux-arm64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-node-linux-arm64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-server-linux-amd64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-server-linux-amd64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-server-linux-arm64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-server-linux-arm64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip


      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Electron Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p ./electron-template/assets/server/lib/amd64/
          cp -rf lib/shentong/amd64/libaci.so ./electron-template/assets/server/lib/amd64/libaci.so
          mkdir -p ./electron-template/assets/server/lib/arm64/
          cp -rf lib/shentong/arm64/libaci.so ./electron-template/assets/server/lib/arm64/libaci.so
          
          cd electron-template
          chmod +x assets/server/server-linux-amd64
          chmod +x assets/server/server-linux-arm64
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --linux -p always

  build-window:
    needs: ["build-static"]
    runs-on: windows-latest
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v4

      # 下载共享资源
      - uses: actions/download-artifact@v4
        with:
          name: release
          path: release

      # 读取发布地址
      - id: release_upload_url
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/release.json
          property: upload_url

      # 下载共享资源
      - uses: actions/download-artifact@v4
        with:
          name: electron-template
          path: electron-template

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      # 打包构建 Server
      - name: Build Server
        uses: actions/setup-go@v2
        with:
          go-version: "1.20.14"
      - name: Setup GCC
        id: setupGCC
        uses: rlalik/setup-cpp-compiler@v1.2
        with:
          compiler: gcc-10.2.0

      - run: |
          mkdir windows-amd64
          go env -w CC=C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin\gcc
          cp -r release/statics ./electron-template/assets/server/statics
          go mod tidy
          go build -ldflags "-s -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }} -X main.buildFlags=--isServer" -o ./windows-amd64/server-windows-amd64.exe .
          go build -ldflags "-s -X teamide/pkg/base.version=${{ steps.release_version.outputs.value }}" -o ./windows-amd64/node-windows-amd64.exe teamide/pkg/node/main

          cp windows-amd64/server-windows-amd64.exe electron-template/assets/server/server-windows-amd64.exe

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Electron Build
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp lib/shentong/win64/aci.dll electron-template/assets/server/lib/aci.dll
          cp lib/shentong/win64/aci.lib electron-template/assets/server/lib/aci.lib
          cp lib/shentong/win64/pthreadVC2_x64.dll electron-template/assets/server/lib/pthreadVC2_x64.dll
          
          cp lib/shentong/win64/aci.dll electron-template/assets/server/aci.dll
          cp lib/shentong/win64/aci.lib electron-template/assets/server/aci.lib
          cp lib/shentong/win64/pthreadVC2_x64.dll electron-template/assets/server/pthreadVC2_x64.dll

          cd electron-template
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --win -p always

      # 上传共享资源
      - uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: windows-amd64
          include-hidden-files: true

  release-window:
    runs-on: ubuntu-latest
    needs: ["build-window"]
    steps:
      # 下载源码
      - name: Checkout code
        uses: actions/checkout@v4

      # 下载共享资源
      - uses: actions/download-artifact@v4
        with:
          name: release
          path: release
      - uses: actions/download-artifact@v4
        with:
          name: windows-amd64
          path: windows-amd64

      # 读取发布地址
      - id: release_upload_url
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/release.json
          property: upload_url

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/package.json
          property: version

      - run: |
          
          cp -r release/statics release/server-windows-amd64/statics
          
          cp lib/shentong/win64/aci.dll release/server-windows-amd64/lib/aci.dll
          cp lib/shentong/win64/aci.lib release/server-windows-amd64/lib/aci.lib
          cp lib/shentong/win64/pthreadVC2_x64.dll release/server-windows-amd64/lib/pthreadVC2_x64.dll
          
          cp lib/shentong/win64/aci.dll release/server-windows-amd64/aci.dll
          cp lib/shentong/win64/aci.lib release/server-windows-amd64/aci.lib
          cp lib/shentong/win64/pthreadVC2_x64.dll release/server-windows-amd64/pthreadVC2_x64.dll
          
          cp windows-amd64/server-windows-amd64.exe release/server-windows-amd64/teamide.exe

          mv release/server-windows-amd64 teamide-server-windows-amd64-${{steps.release_version.outputs.value}}
          zip -q -r teamide-server-windows-amd64-${{steps.release_version.outputs.value}}.zip teamide-server-windows-amd64-${{steps.release_version.outputs.value}}
          
          mkdir -p teamide-node-windows-amd64-${{steps.release_version.outputs.value}}
          cp windows-amd64/node-windows-amd64.exe teamide-node-windows-amd64-${{steps.release_version.outputs.value}}/node.exe
          zip -q -r teamide-node-windows-amd64-${{steps.release_version.outputs.value}}.zip teamide-node-windows-amd64-${{steps.release_version.outputs.value}}
      # 上传 到 Release
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-node-windows-amd64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-node-windows-amd64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: teamide-server-windows-amd64-${{steps.release_version.outputs.value}}.zip
          asset_name: teamide-server-windows-amd64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip

